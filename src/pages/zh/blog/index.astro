---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../components/layout/BaseLayout.astro';
import { blogContent } from '../../../i18n/content/blog';

const content = blogContent.zh;
const allPosts = await getCollection('blog');
// Filter only Chinese blog posts (those in zh/ subdirectory)
const zhPosts = allPosts.filter(post => post.slug.startsWith('zh/'));
const sortedPosts = zhPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Group posts by category
const categories = [...new Set(sortedPosts.map(post => post.data.category))];
const postsByCategory = categories.reduce((acc, category) => {
  if (category) {
    acc[category] = sortedPosts.filter(post => post.data.category === category);
  }
  return acc;
}, {} as Record<string, typeof sortedPosts>);

const featuredPosts = sortedPosts.filter(post => post.data.featured).slice(0, 6);
---

<BaseLayout title="Sora ÂçöÂÆ¢ - ÂÆåÊï¥ÂçöÂÆ¢ÂêàÈõÜ" description="ÂÖ®Èù¢ÁöÑ Sora ÂçöÂÆ¢ÈõÜ„ÄÅÊäÄÂ∑ß„ÄÅËßÜÈ¢ëÂàõ‰ΩúÁ≠ñÁï•Âíå AI ÁîüÊàêÊäÄÊúØ„ÄÇÊÇ®ÁöÑÁªàÊûÅ Sora ËµÑÊ∫ê„ÄÇ">
  <!-- Hero Section -->
  <div class="relative overflow-hidden bg-gradient-to-br from-purple-600 via-pink-500 to-blue-600 dark:from-purple-900 dark:via-pink-900 dark:to-blue-900 pb-20">
    <div class="absolute inset-0 opacity-10">
      <div class="absolute inset-0" style="background-image: radial-gradient(circle at 25% 25%, rgba(255,255,255,0.2) 2%, transparent 0%), radial-gradient(circle at 75% 75%, rgba(255,255,255,0.2) 2%, transparent 0%); background-size: 60px 60px;"></div>
    </div>

    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-20 text-center z-10">
      <div class="inline-flex items-center gap-2 bg-white/10 backdrop-blur-sm border border-white/20 rounded-full px-4 py-2 mb-6">
        <span class="text-2xl">üìö</span>
        <span class="text-white text-sm font-medium">{content.badge}</span>
      </div>

      <h1 class="text-4xl sm:text-5xl font-extrabold text-white mb-4">
        {content.title}
      </h1>
      <p class="text-xl text-white/90 max-w-3xl mx-auto mb-8">
        {content.subtitle}
      </p>
    </div>

    <div class="absolute bottom-0 left-0 right-0 z-0">
      <svg viewBox="0 0 1440 120" fill="none" xmlns="http://www.w3.org/2000/svg" class="w-full h-auto">
        <path d="M0 120L60 105C120 90 240 60 360 45C480 30 600 30 720 37.5C840 45 960 60 1080 67.5C1200 75 1320 75 1380 75L1440 75V120H1380C1320 120 1200 120 1080 120C960 120 840 120 720 120C600 120 480 120 360 120C240 120 120 120 60 120H0Z" fill="currentColor" class="text-gray-50 dark:text-gray-900"/>
      </svg>
    </div>
  </div>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Search and filters -->
    <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 mb-12 shadow-lg border border-gray-100 dark:border-gray-700">
      <div class="max-w-2xl mx-auto mb-6">
        <div class="relative">
          <svg class="absolute left-4 top-3.5 h-5 w-5 text-gray-400 dark:text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <input
            type="text"
            id="search"
            placeholder={content.search.placeholder}
            class="w-full px-4 py-3 pl-12 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 dark:text-white"
          >
        </div>
      </div>

      <!-- Category filters -->
      <div class="flex flex-wrap gap-2 justify-center">
        <button class="category-filter active bg-gradient-to-br from-purple-600 to-pink-600 text-white px-4 py-2 rounded-lg font-medium hover:from-purple-700 hover:to-pink-700 transition-all shadow-md" data-category="all">
          {content.filters.allPosts} ({sortedPosts.length})
        </button>
        {categories.filter(c => c).map((category) => (
          <button class="category-filter bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-4 py-2 rounded-lg font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" data-category={category}>
            {category!.charAt(0).toUpperCase() + category!.slice(1)} ({postsByCategory[category!].length})
          </button>
        ))}
      </div>
    </div>

    <!-- Featured Blog -->
    {featuredPosts.length > 0 && (
      <section class="mb-16">
        <div class="flex items-center gap-3 mb-8">
          <div class="bg-gradient-to-br from-yellow-500 to-orange-500 rounded-xl p-3">
            <span class="text-3xl">‚≠ê</span>
          </div>
          <h2 class="text-3xl font-bold text-gray-900 dark:text-white">{content.sections.featured}</h2>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {featuredPosts.map((post) => (
            <article class="relative group">
              <div class="absolute inset-0 bg-gradient-to-br from-purple-400 to-pink-400 rounded-2xl blur-xl opacity-20 group-hover:opacity-30 transition-opacity"></div>
              <div class="relative bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-100 dark:border-gray-700">
                <div class="p-6">
                  <div class="flex items-center justify-between mb-4">
                    <span class="bg-gradient-to-br from-purple-600 to-pink-600 text-white px-3 py-1 rounded-full text-sm font-semibold">
                      {post.data.category}
                    </span>
                    <time class="text-gray-500 dark:text-gray-400 text-sm">
                      {post.data.pubDate.toLocaleDateString()}
                    </time>
                  </div>
                  <h3 class="text-xl font-bold mb-3 text-gray-900 dark:text-white hover:text-purple-600 dark:hover:text-purple-400 transition-colors">
                    <a href={`/zh/blog/${post.slug.replace(/^zh\//, '')}`}>
                      {post.data.title}
                    </a>
                  </h3>
                  <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed mb-4">
                    {post.data.description}
                  </p>
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags?.slice(0, 3).map((tag) => (
                      <span class="bg-purple-50 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400 px-2 py-1 rounded text-xs border border-purple-100 dark:border-purple-800">
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
      </section>
    )}

    <!-- All Blog -->
    <section>
      <div class="flex items-center gap-3 mb-8">
        <div class="bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl p-3">
          <span class="text-3xl">üìñ</span>
        </div>
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white">{content.sections.allPosts}</h2>
      </div>
      <div id="posts-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {sortedPosts.map((post) => (
          <article class="post-card relative group" data-category={post.data.category}>
            <div class="absolute inset-0 bg-gradient-to-br from-blue-400 to-cyan-400 rounded-2xl blur-xl opacity-0 group-hover:opacity-20 transition-opacity"></div>
            <div class="relative bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 border border-gray-100 dark:border-gray-700">
              <div class="p-6">
                <div class="flex items-center justify-between mb-4">
                  <span class="bg-gradient-to-br from-blue-600 to-cyan-600 text-white px-3 py-1 rounded-full text-sm font-semibold">
                    {post.data.category}
                  </span>
                  <time class="text-gray-500 dark:text-gray-400 text-sm">
                    {post.data.pubDate.toLocaleDateString()}
                  </time>
                </div>
                <h3 class="text-xl font-bold mb-3 text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
                  <a href={`/zh/blog/${post.slug.replace(/^zh\//, '')}`}>
                    {post.data.title}
                  </a>
                </h3>
                <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed mb-4">
                  {post.data.description}
                </p>
                <div class="flex flex-wrap gap-2">
                  {post.data.tags?.slice(0, 3).map((tag) => (
                    <span class="bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 px-2 py-1 rounded text-xs border border-blue-100 dark:border-blue-800">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </article>
        ))}
      </div>

      <!-- No results message -->
      <div id="no-results" class="hidden text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">{content.search.noResults.title}</h3>
        <p class="text-sm text-gray-500 dark:text-gray-400">
          {content.search.noResults.description}
        </p>
      </div>
    </section>
  </div>

  <script>
    // Search functionality
    const searchInput = document.getElementById('search') as HTMLInputElement | null;
    const postCards = document.querySelectorAll<HTMLElement>('.post-card');
    const categoryFilters = document.querySelectorAll<HTMLElement>('.category-filter');
    const noResults = document.getElementById('no-results');

    let currentCategory = 'all';

    searchInput?.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      const searchTerm = target.value.toLowerCase();
      filterPosts(searchTerm, currentCategory);
    });

    categoryFilters.forEach(filter => {
      filter.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        categoryFilters.forEach(f => {
          f.classList.remove('active', 'bg-gradient-to-br', 'from-purple-600', 'to-pink-600', 'from-purple-700', 'to-pink-700');
          f.classList.add('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
        });

        target.classList.add('active', 'bg-gradient-to-br', 'from-purple-600', 'to-pink-600');
        target.classList.remove('bg-gray-100', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300');
        target.classList.add('text-white');

        currentCategory = target.dataset.category || 'all';
        const searchTerm = searchInput?.value.toLowerCase() || '';
        filterPosts(searchTerm, currentCategory);
      });
    });

    function filterPosts(searchTerm: string, category: string) {
      let visibleCount = 0;

      postCards.forEach(card => {
        const title = card.querySelector('h3 a')?.textContent?.toLowerCase() || '';
        const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
        const tags = Array.from(card.querySelectorAll('.bg-blue-50, .dark\\:bg-blue-900\\/30')).map(tag => tag.textContent?.toLowerCase() || '');
        const cardCategory = card.dataset.category;

        const matchesSearch = !searchTerm ||
          title.includes(searchTerm) ||
          description.includes(searchTerm) ||
          tags.some(tag => tag.includes(searchTerm));

        const matchesCategory = category === 'all' || cardCategory === category;

        if (matchesSearch && matchesCategory) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      // Show/hide no results message
      if (noResults) {
        if (visibleCount === 0) {
          noResults.classList.remove('hidden');
        } else {
          noResults.classList.add('hidden');
        }
      }
    }
  </script>
</BaseLayout>
