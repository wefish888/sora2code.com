---
import type { ShiftCode } from '../../types/api';
import CodeCopyButton from '../islands/CodeCopyButton';

interface Props {
  code: ShiftCode;
}

const { code } = Astro.props;

// Calculate remaining time (server-side)
const now = new Date();
const expiresAt = code.expiresAt ? new Date(code.expiresAt) : null;
const isExpired = expiresAt ? now > expiresAt : false;
const timeRemaining = expiresAt ? Math.max(0, expiresAt.getTime() - now.getTime()) : null;

// Format time display
function formatTimeRemaining(ms: number): string {
  const hours = Math.floor(ms / (1000 * 60 * 60));
  const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));

  if (hours > 24) {
    const days = Math.floor(hours / 24);
    return `${days} days ${hours % 24} hours`;
  }

  return `${hours} hours ${minutes} minutes`;
}

// Get platform style class
function getPlatformClass(platform: string): string {
  switch (platform) {
    case 'pc': return 'platform-pc';
    case 'playstation': return 'platform-playstation';
    case 'xbox': return 'platform-xbox';
    default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
  }
}

// Get status style class
function getStatusClass(status: string): string {
  switch (status) {
    case 'active': return 'status-active';
    case 'expired': return 'status-expired';
    case 'invalid': return 'status-invalid';
    default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
  }
}

// Get status text
function getStatusText(status: string): string {
  switch (status) {
    case 'active': return 'Active';
    case 'expired': return 'Expired';
    case 'invalid': return 'Invalid';
    case 'pending': return 'Pending';
    default: return status;
  }
}

// Get platform display name
function getPlatformName(platform: string): string {
  switch (platform) {
    case 'pc': return 'PC';
    case 'playstation': return 'PlayStation';
    case 'xbox': return 'Xbox';
    default: return platform.toUpperCase();
  }
}
---

<div class={`code-card p-6 ${isExpired ? 'opacity-60 grayscale' : ''} animate-slide-up`}>
  <!-- Card header -->
  <div class="flex items-start justify-between mb-4">
    <div class="flex-1">
      <div class="font-mono text-lg font-bold text-primary-600 dark:text-primary-400 mb-2 break-all">
        {code.code}
      </div>
      <div class="flex items-center gap-2">
        <span class={`platform-tag ${getStatusClass(code.status)}`}>
          {getStatusText(code.status)}
        </span>
        {code.isFeatured && (
          <span class="platform-tag bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300">
            ‚≠ê Featured
          </span>
        )}
      </div>
    </div>

    <!-- Source information -->
    {code.sourceAuthor && (
      <div class="text-right text-xs text-gray-500 dark:text-gray-400">
        <div>Source: {code.sourceAuthor}</div>
        <div>{new Date(code.createdAt).toLocaleString('en-US')}</div>
      </div>
    )}
  </div>

  <!-- Reward information -->
  <div class="mb-4">
    <div class="text-sm text-gray-600 dark:text-gray-400 mb-1">üèÜ Reward</div>
    <div class="font-medium text-gray-900 dark:text-gray-100">
      {code.reward || 'Unknown Reward'}
      {code.rewardQuantity && ` x${code.rewardQuantity}`}
    </div>
  </div>

  <!-- Platform tags -->
  <div class="mb-4">
    <div class="text-sm text-gray-600 dark:text-gray-400 mb-2">üì± Supported Platforms</div>
    <div class="flex flex-wrap gap-1">
      {code.platforms.map((platform) => (
        <span class={`platform-tag ${getPlatformClass(platform)}`}>
          {getPlatformName(platform)}
        </span>
      ))}
    </div>
  </div>

  <!-- Time information -->
  {timeRemaining && !isExpired && (
    <div class="mb-4">
      <div class="text-sm text-gray-600 dark:text-gray-400 mb-1">‚è∞ Time Remaining</div>
      <div class="font-mono text-sm text-orange-600 dark:text-orange-400 font-medium">
        {formatTimeRemaining(timeRemaining)}
      </div>
    </div>
  )}

  {isExpired && (
    <div class="mb-4">
      <div class="text-sm text-red-600 dark:text-red-400 font-medium">
        ‚ö†Ô∏è This code has expired
      </div>
    </div>
  )}

  <!-- Statistics -->
  <div class="mb-4 text-xs text-gray-500 dark:text-gray-400">
    <div class="flex items-center gap-4">
      <span>üëÅÔ∏è {code.viewCount} views</span>
      <span>üìã {code.copyCount} copies</span>
      {code.invalidReports > 0 && (
        <span class="text-red-500">‚ö†Ô∏è {code.invalidReports} reports</span>
      )}
    </div>
  </div>

  <!-- Action buttons -->
  <div class="flex gap-2">
    <CodeCopyButton
      client:load
      code={code.code}
      codeId={code.id}
      disabled={isExpired}
    />

    <button
      class="btn-secondary text-sm px-3 py-2 flex items-center gap-1"
      onclick={`reportCode('${code.id}')`}
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
      </svg>
      Report
    </button>

    {code.sourceUrl && (
      <a
        href={code.sourceUrl}
        target="_blank"
        rel="noopener noreferrer"
        class="btn-secondary text-sm px-3 py-2 flex items-center gap-1"
      >
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
        </svg>
        Source
      </a>
    )}
  </div>
</div>

<script>
  // Report code function
  declare global {
    interface Window {
      reportCode: (codeId: string) => void;
    }
  }

  window.reportCode = function(codeId: string) {
    const reason = prompt('Please enter the reason for reporting:');
    if (!reason) return;

    fetch(`/api/v1/codes/${codeId}/report`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ reason })
    })
    .then(response => {
      if (response.ok) {
        alert('Report submitted, thank you for your feedback!');
      } else {
        alert('Failed to submit report, please try again later.');
      }
    })
    .catch(() => {
      alert('Network error, please try again later.');
    });
  };
</script>

<style>
  .code-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .dark .code-card:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }
</style>